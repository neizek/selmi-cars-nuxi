generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model CarMake {
  id              Int        @id @default(autoincrement())
  name            String     @unique
  slug            String
  countryOfOrigin String?
  logoUrl         String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  models          CarModel[]
  cars            Cars[]

  @@map("car_makes")
}

model CarModel {
  id     Int     @id @default(autoincrement())
  name   String
  slug   String
  makeId Int
  make   CarMake @relation(fields: [makeId], references: [id])
  cars   Cars[]

  @@unique([makeId, name])
  @@index([makeId])
  @@map("car_models")
}

model Cars {
  id        Int         @id @default(autoincrement())
  makeId    Int
  make      CarMake     @relation(fields: [makeId], references: [id])
  modelId   Int
  model     CarModel    @relation(fields: [modelId], references: [id])
  price     Int
  year      Int
  mileage   Int
  userId    Int
  user      User        @relation(fields: [userId], references: [id])
  carImages CarImages[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index([userId])
  @@index([makeId])
  @@index([modelId])
  @@map("cars")
}

model CarImages {
  id      Int   @id @default(autoincrement())
  carId   Int
  car     Cars  @relation(fields: [carId], references: [id])
  imageId Int
  images  Image @relation(fields: [imageId], references: [id])

  @@index([carId])
  @@index([imageId])
  @@map("car_images")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  firstname String
  lastname  String
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cars      Cars[]

  @@map("users")
}

model Entity {
  id                 Int    @id @default(autoincrement())
  registrationnumber String

  @@map("entities")
}

model File {
  id          Int      @id @default(autoincrement())
  url         String
  mimeType    String
  size        Int
  createdAt   DateTime @default(now())
  toDeleteAt  DateTime @default(now())
  s240Images  Image[]  @relation("S240FileRelation")
  s480Images  Image[]  @relation("S480FileRelation")
  s720Images  Image[]  @relation("S720FileRelation")
  s1080Images Image[]  @relation("S1080FileRelation")

  @@map("files")
}

model Image {
  id          Int         @id @default(autoincrement())
  s240FileId  Int
  s240File    File        @relation("S240FileRelation", fields: [s240FileId], references: [id])
  s480FileId  Int
  s480File    File        @relation("S480FileRelation", fields: [s480FileId], references: [id])
  s720FileId  Int
  s720File    File        @relation("S720FileRelation", fields: [s720FileId], references: [id])
  s1080FileId Int
  s1080File   File        @relation("S1080FileRelation", fields: [s1080FileId], references: [id])
  CarImages   CarImages[]

  @@index([s240FileId])
  @@index([s480FileId])
  @@index([s720FileId])
  @@index([s1080FileId])
  @@map("images")
}

enum Role {
  ADMIN
  MODERATOR
  USER
}

enum BodyStyle {
  SEDAN
  SUV
  HATCHBACK
  COUPE
  CONVERTIBLE
  WAGON
  VAN
  TRUCK
  CROSSOVER
  MINIVAN
}

enum FuelType {
  GASOLINE
  DIESEL
  ELECTRIC
  HYBRID
  PLUGIN_HYBRID
  HYDROGEN
  NATURAL_GAS
}

enum TransmissionType {
  MANUAL
  AUTOMATIC
  CVT
  SEMI_AUTOMATIC
  DUAL_CLUTCH
}
